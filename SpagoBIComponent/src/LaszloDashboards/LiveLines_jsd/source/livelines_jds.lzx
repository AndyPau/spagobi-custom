<canvas width="100%" height="100%"> 

  <script>
        var xmldata = "";
        var xmlconfig = ""; 
        delay = typeof(global.delay)!="undefined" ? global.delay : "50"; 
        delay = parseInt(delay);
        logicalname = typeof(global.logicalname)!="undefined" ? global.logicalname : "";
        linkbaseurl = typeof(global.linkbaseurl)!="undefined" ? global.linkbaseurl : "";
	      uuid = typeof(global.uuid)!="undefined" ? global.uuid : "";
        var dataPointer = new LzDatapointer();
        var confPointer = new LzDatapointer();  
      
        // *********** start configuration parameter *****************
        var xValueAttributeName = "xLabel";
	      var refreshtime = 10000;
		    var timeGridStep  = "0:01";
        var stepNum = 10; 
	      var minY = 0;	
    	  var maxY = 200;
		    var stepY  = 20;
		    var colorLine1 = 0xf40b26;
	      var colorLine2 = 0x1fe70a;
	      var colorLine3 = 0xf43ec7;
	      var colorLine4 = 0x750fe8;
	      var colorLine5 = 0xa732bc;
        var colorLine6 = 0x0cc4cb;
	      var colorLine7 = 0x0aab7c;
	      var colorLine8 = 0xb01048;
	      var colorLine9 = 0xedb110;
	      var colorLine10 = 0xfda1a1;
	      var backgroundColor = 0xfff9c9;
	      var xlabellevels = 1;
        // *********** end configuration parameter *****************
	
	      var xLabel = "Time";
	      var yLabel = "";
	      var timeStart = "undefined";	
        var timeStop = "undefined";
	     	var minX;
      	var maxX;
      	var gridStepX;
      	var stepX;
      	var xRange;
      	var setStart = false;	
      	var xAxisLenght = 0;
      	var yAxisLenght = 0;
      	var xMarkerMargin = 0;
      	var yMarkerMargin = 0;
	      var displayMargin = 20;
	      var heightButtonLegend = 20;

        var actualang = -1;  
        var isSetup = true;
	      var tempData;
	      var startX; 
        var stopX; 
	      var stopY = 0;	
        var startY = 0;
	      var lineID = 0;
  </script>  



     <method name="redraw" args="dataPointer">
        
         dataPointer.selectChild();
         var lineName;
    	   var group;
    	   var record;
    	   var child;
    	   var xValue;
    	   var color;
    	   var rows;
    	   var row;
         duplicate_Main_pointer = dataPointer.dupePointer();
	       var attributesMap = duplicate_Main_pointer.getNodeAttributes();
    	   lineID = 0;
	       for( var attributeName in attributesMap ) {
		        lineID=lineID+1;
		        if(attributeName==xValueAttributeName){
			         xValue = duplicate_Main_pointer.getNodeAttribute(attributeName);
	          } else {
			         stopY = parseFloat(duplicate_Main_pointer.getNodeAttribute(attributeName));
			         color = canvas.display.getColor("colorLine"+lineID);	
      			   if(isSetup) {
      				    lineName = attributeName;
      				    startY = stopY;	
      				    new line(canvas.display,{name : "line"+lineID, color : color, lineName:lineName, yValue:stopY});
      				    legend.addItem(lineName,color,lineID);
      			   } else {
      				    startY=	parseFloat(canvas.display["line"+lineID].getAttribute("yValue"));
      				    canvas.display["line"+lineID].setAttribute("yValue",stopY);			
      				    canvas.display["line"+lineID].drawLine(color);
      			   }
            }
          } 
         if (isSetup) isSetup=false;	
	    </method>


  
      <method name="refresh" >
	         if (stopX+stepX &gt; maxX){
				      minX = minX+xRange;
		          maxX = maxX+xRange;
		          startX = minX;
		          stopX = startX+stepX;		
		          for (var i=1; i&lt;lineID+1; i++){
			           canvas.display["line"+i].clear();
			           canvas.display["line"+i].beginPath();
		          }
		          canvas.display.xAxis.setText();
           } else {
		          startX = stopX;
		          stopX = stopX+stepX;
	         }
     </method>

     
     <method name="checkdataload" >
          if(xmldata=="") {
              canvas.timercheckdataloaded();   
           } else { 
              var valuexml = xmldata;  
              var dataDom = LzDataNode.stringToLzData(valuexml, false); 
              if(dataDom!=null) {
                xmldata = "";
                dataPointer.setPointer(dataDom);
                canvas.refresh();
                canvas.redraw(dataPointer);
              }
           }
     </method>
     
     
     <method name="timercheckdataloaded">
          this.checkDataLoad = new LzDelegate( this, "checkdataload" );
   	      LzTimer.addTimer(this.checkDataLoad, 200);	
     </method> 
     
     
     <method name="getxmldata">
          <![CDATA[
          var s = "javascript:getxmldata"+uuid+"('"+logicalname+"');";
          LzBrowser.loadURL(s);
          //var data = '<rows><row a="15" b="20" c="25" d="30" e="35" f="40" Store_efficiency="78.69479" Budget_satisfation="89.053474" Emp_occupation_degree="80.178665" Incidence_of_Costs="15.079561" /></rows>';
          //xmldata = data;
          canvas.timercheckdataloaded();
          canvas.timergetxmldata();
          ]]>
     </method> 
     
     
     <method name="checkconfload" >
          <![CDATA[   
          if(xmlconfig=="") {
              canvas.timercheckconfloaded();   
          } else { 
              var valuexmlconf = xmlconfig;
              var dataDomConf = LzDataNode.stringToLzData(valuexmlconf, false); 
              if(dataDomConf!=null) {
                  confPointer.setPointer(dataDomConf);
                  // gather parameter values
                  childs = confPointer.xpathQuery("./PARAMETERS/*");
                  for(var index=0; index < childs.length; index++) {
                      var name = childs[index].getAttr("name");
                      var value = childs[index].getAttr("value");
                      if(name=="xValueAttributeName") {
                          xValueAttributeName = value;
                      }
                      if(name=="refreshtime") {
                         refreshtime = parseInt(value);
                      }
                      if(name=="timeGridStep") {
                          timeGridStep = value;
                      }
                      if(name=="stepNum") {
                         stepNum = parseInt(value);
                      }
                      if(name=="minY") {
                         minY = parseInt(value);
                      }
                      if(name=="maxY") {
                         maxY = parseInt(value);
                      }
                      if(name=="stepY") {
                         stepY = parseInt(value);
                      }
                      if(name=="colorLine1") {
                         colorLine1 = value;
                      }
                      if(name=="colorLine2") {
                         colorLine2 = value;
                      }
                      if(name=="colorLine3") {
                         colorLine3 = value;
                      }
                      if(name=="colorLine4") {
                         colorLine4 = value;
                      }
                      if(name=="colorLine5") {
                         colorLine5 = value;
                      }
                      if(name=="colorLine6") {
                         colorLine6 = value;
                      }
                      if(name=="colorLine7") {
                         colorLine7 = value;
                      }
                      if(name=="colorLine8") {
                         colorLine8 = value;
                      }
                      if(name=="colorLine9") {
                         colorLine9 = value;
                      }
                      if(name=="colorLine10") {
                         colorLine10 = value;
                      }
                      if(name=="backgroundColor") {
                         backgroundColor = value;
                      }
                      if(name=="xlabellevels") {
                         xlabellevels = value;
                      }
                  }     
                  canvas.display.setInitParameters();
                  canvas.display.showDisplay();
                  tempData = new LzDataElement("tempData");    
                  canvas.getxmldata();
              }
          }
     ]]>
     </method>
    
    
    
     <method name="timercheckconfloaded">
         this.checkConfLoad = new LzDelegate( this, "checkconfload" );
   	     LzTimer.addTimer(this.checkConfLoad, 200);	
     </method> 
    
    
     <method name="getxmlconfig">
         <![CDATA[
         var s = "javascript:getxmlconfig"+uuid+"('"+logicalname+"');";  
         LzBrowser.loadURL(s); 
         //var config = '<CONFIGURATION><PARAMETERS><PARAMETER name="stepY" value="20"/><PARAMETER name="maxY" value="210"/><PARAMETER name="minY" value="10"/><PARAMETER name="timeGridStep" value="0:02"/><PARAMETER name="stepNum" value="20"/><PARAMETER name="refreshtime" value="5000"/><PARAMETERS></CONFIGURATION>';
         //xmlconfig = config;
         canvas.timercheckconfloaded();
         ]]>
     </method>  

    <method name="timergetxmldata">
        this.getXmlDataDelegate = new LzDelegate( this, "getxmldata" );
   	    LzTimer.addTimer( this.getXmlDataDelegate, refreshtime); 	
    </method>   


     <method name="start" event="oninit">
          this.getXmlConfDel = new LzDelegate( this, "getxmlconfig" );
   	      LzTimer.addTimer( this.getXmlConfDel, delay);
          canvas.showLegendWindow.setAttribute("x", (canvas.width - canvas.showLegendWindow.width) / 2 );  
          canvas.showLegendWindow.setAttribute("y", canvas.height - heightButtonLegend - 5);
     </method>






























<!-- **CANVAS.DISPLAY**************************************************************-->

  <drawview name="display" clip="true" width="${parent.width}" height="${parent.height}"> 

  	 <method name="showDisplay">
		      xMarkerMargin = 30;   
		      //yMarkerMargin = 30;
		      yMarkerMargin = (12 * xlabellevels) + 5 + heightButtonLegend + 2;
          xAxisLenght = (canvas.width-2*displayMargin-xMarkerMargin);
	        yAxisLenght = (canvas.height-2*displayMargin-yMarkerMargin);
		      this.drawChart(displayMargin,displayMargin);
		      this.xAxis.showXAxis();
		      this.yAxis.showYAxis();
		      this.xGrid.showXGrid();
		      this.yGrid.showYGrid();
	   </method>


     <drawview name="xAxis"> 
	         <method name="showXAxis" >
		              var fontSize = 9;
              		var numDivX = xRange/gridStepX;
              		var stepOnAxis = xAxisLenght/numDivX;
              		var temp = minX
              		var hours = Math.floor(temp/60);
              		var minutes = temp-(hours*60);
              		while (hours &gt; 23) {
              			hours=hours-24;
              		}
              		if (hours &lt; 10) label = "0"+hours;
              		else label = hours;
              		if (minutes &lt; 10) label = label+":0"+minutes;
              		else label = label+":"+minutes;
              		var posX = xMarkerMargin+displayMargin;
              		for (var c = 0; c &lt; numDivX +1; c++){
              			
                    var txt = new LzText(canvas.display.xAxis,{name : "text"+c});
              			txt.setAttribute("fontsize",fontSize);
              			txt.setText(label);
              			txt.setWidth(4*fontSize);					
              			txt.setX(posX - (txt.getTextWidth()/2) );		
                    txt.setY(displayMargin + yAxisLenght + (txt.getTextHeight()/2) + (txt.getTextHeight() * (c%xlabellevels)) );
                    
                    temp = temp + gridStepX;
              			hours = Math.floor(temp/60);
              			minutes = temp-(hours*60);
              			while (hours &gt; 23) {
              				hours=hours-24;
              			}
              			if (hours &lt; 10) label = "0"+hours;
              			else label = hours;
              			if (minutes &lt; 10) label = label+":0"+minutes;
              			else label = label+":"+minutes;
              			posX = posX+stepOnAxis;
		              }
	          </method>
	
	
            <method name="setText">
              		var numDivX = xRange/gridStepX;
              		var temp = minX;
              		var hours = Math.floor(temp/60);
              		var minutes = temp-(hours*60);
              		while (hours &gt; 23) {
              				hours=hours-24;
              		}
              		if (hours &lt; 10) label = "0"+hours;
              		else label = hours;
              		if (minutes &lt; 10) label = label+":0"+minutes;
              		else label = label+":"+minutes;
              		for (var c = 0; c &lt; numDivX +1; c++){
              			canvas.display.xAxis["text"+c].setText(label);
              			temp = temp + gridStepX;
              			hours = Math.floor(temp/60);
              			minutes = temp-(hours*60);
              			while (hours &gt; 23) {
              				hours=hours-24;
              			}	
              			if (hours &lt; 10) label = "0"+hours;
              			else label = hours;
              			if (minutes &lt; 10) label = label+":0"+minutes;
              			else label = label+":"+minutes;
              		}
	         </method>

     </drawview>

  
  
     <drawview name="yAxis"> 
		      <method name="showYAxis" >
            		var fontSize = 9;
            		var numDivY = (maxY-minY)/stepY;
            		var stepOnAxis = yAxisLenght/numDivY;
            		var label = minY;
            		var posY = displayMargin+yAxisLenght;
            		for (var c = 0; c &lt; numDivY+1 ; c++){
            			var txt = new LzText(canvas.display.yAxis,{name : "text"+c, align:"left"});
            			txt.setAttribute("fontsize",fontSize);
            			txt.setColor("red");
            			txt.setText(label);
            			txt.setWidth(3*fontSize);
            			txt.setHeight(3*fontSize);
            			txt.setX(displayMargin);					
            			txt.setY(posY-fontSize);
            			label = label+stepY;
            			posY = posY-stepOnAxis;
            		}
	       </method>
     </drawview>


     <drawview name="xGrid"> 
	       <method name="showXGrid" >
              		var numDivY = (maxY-minY)/stepY;
              		var stepOnAxis = yAxisLenght/numDivY;
              		var posY = displayMargin+yAxisLenght-stepOnAxis;
              		for (var c = 0; c &lt; numDivY ; c++){
              			moveTo(displayMargin+xMarkerMargin,posY);
              			lineTo(displayMargin+xMarkerMargin+xAxisLenght,posY);	
              			posY = posY-stepOnAxis;
              		}
	               this.strokeStyle = 0x000000;
	               this.lineWidth = 1;
	               this.stroke();
	       </method>
     </drawview>



     <drawview name="yGrid"> 
		      <method name="showYGrid" >
            		var numDivX = xRange/gridStepX;
            		var stepOnAxis = xAxisLenght/numDivX;
            		var posX = displayMargin+xMarkerMargin+stepOnAxis;
            		for (var c = 0; c &lt; numDivX ; c++){
            			moveTo(posX,displayMargin);
            			lineTo(posX,displayMargin+yAxisLenght);	
            			posX = posX+stepOnAxis;
            		}
      	        this.strokeStyle = 0x000000;
      	        this.lineWidth = 1;
      	        this.stroke();
	        </method>
     </drawview>


	
      <!-- **Creare il rettangolo con gli assi e le lebel************-->
	    <method name="drawChart" args="x0,y0">
				    <!-- **rectangle************-->
        		this.beginPath();
        		this.rect(x0+xMarkerMargin,y0,xAxisLenght,yAxisLenght);
        		this.closePath();
  	        this.strokeStyle = backgroundColor;
  	        this.lineWidth = 5;
  	        this.stroke();
  		      this.fillStyle = 0xfff999;
  	        this.globalAlpha = 3; 		
  	        this.fill();
            <!-- g = this.createLinearGradient(x0+xAxisLenght/2,y0+yAxisLenght/2,x0+xAxisLenght/2,y0+yAxisLenght/2)-->
            var g = this.createLinearGradient(x0,y0,x0+xAxisLenght,y0+yAxisLenght)
           	this.globalAlpha = 0;
   	        g.addColorStop(0, 0x000000);
          	this.globalAlpha = 0.5;
	          g.addColorStop(1, 0xffffff);
            this.fillStyle = g;
        	  this.fill();
		        <!-- **axis************-->	
		        this.beginPath();
		        this.moveTo(x0+xMarkerMargin,y0+yAxisLenght);
        		this.lineTo(x0+xAxisLenght+xMarkerMargin,y0+yAxisLenght);
        		this.moveTo(x0+xMarkerMargin,y0+yAxisLenght);
        		this.lineTo(x0+xMarkerMargin,y0);
        		this.closePath();
	          this.strokeStyle = 0x000000;
	          this.lineWidth = 5;
	          this.stroke();
	    </method>


     <method name="getColor" args="colorDefinition">
	         var color;
        	 switch (colorDefinition){
            	case "colorLine1": color=colorLine1;
            			break;
            	case "colorLine2": color = colorLine2;
            			break;
            	case "colorLine3": color = colorLine3;
            			break;
            	case "colorLine4": color = colorLine4;
            			break;
            	case "colorLine5": color= colorLine5;
            			break;
            	case "colorLine6": color= colorLine6;
            			break;
            	case "colorLine7": color= colorLine7;
            			break;
            	case "colorLine8": color= colorLine8;
            			break;
            	case "colorLine9": color= colorLine9;
            			break;
            	case "colorLine10": color= colorLine10;
           }
           if (color=="undefined") return Oxffffff;
	         else return color;
     </method>


     <method name="setInitParameters">
           stepX = refreshtime/60000; <!--minutes-->
		       if(timeGridStep=="undefined") {
		           gridStepX = stepX;
	         } else {
		           temp = timeGridStep.split(":") 
          		 timeGridStepHour = parseInt(temp[0]);
          		 timeGridStepMinute = parseInt(temp[1]);
          		 gridStepX = timeGridStepHour*60+timeGridStepMinute;
           }
	         if(timeStart=="undefined") {
				        minX = getNow();
	         } else {
            		temp = timeStart.split(":") 
            		timeStartHour = parseInt(temp[0]);
            		timeStartMinute = parseInt(temp[1]);
            		minX = timeStartMinute+timeStartHour*60;
           }
	         if (timeStop == "undefined") {
		            maxX = minX+gridStepX * stepNum; 
	         } else {
		            temp = timeStop.split(":") 
            		timeStopHour = parseInt(temp[0]);
            		timeStopMinute = parseInt(temp[1]);
            		maxX = timeStopHour*60+timeStopMinute;
            		if (maxX &lt; minX) maxX = maxX+24*60;
	         }
	         xRange = maxX-minX;
	         if (setStart) {
		            var now = this.getNow();
            		<![CDATA[
            		if ((now < maxX )&&(now > minX )) {
            		    startX = now-stepX;
            		} else {
            			  startX = minX-stepX;
            		}]]>
		       } else {
		            startX = minX-stepX;
	         }
        	 //stopX = startX+stepX;
        	 stopX = startX;
    </method>



    <method name="getNow">
	         d = new Date();
	         nowHour = d.getHours();
	         nowMinute = d.getMinutes();
	         return (nowHour*60+nowMinute); 
    </method>









     
 </drawview> <!-- **CANVAS.DISPLAY**************************************************************-->







        <window name="legend" x="${(parent.width-(parent.width/2))/2}" y="10" height="${parent.height/2}" width="${parent.width/2}" title="Legend" resizable="true" closeable="true" align="center">

        	 <wrappinglayout axis="y" spacing="10"/>
        	      	 
        	 <method name="addItem" args="lineName,color,ID">
           			this.setX(displayMargin+yMarkerMargin+xAxisLenght/2-this.getWidth()/2);
        	 			var legIt = new legendItem(this,{name:"legend"+ID});
        	     	legIt.drawItem(lineName,color);		
           			this.setVisible(false);		
        	 </method>
        
           <method event="onvisible">
        	     	if (!this.getAttribute(visible)) canvas.showLegendWindow.setVisible(true);
           </method>
        
        </window>


        <button width="200" height="20" name="showLegendWindow" text="Legend">
        	
            <method event="oninit">
        		    this.setVisible(false);
        		    this.setX(displayMargin+yMarkerMargin+xAxisLenght/2-this.getWidth()/2);
        		 		this.setY(displayMargin+xMarkerMargin+yAxisLenght-this.getHeight()/2);
        	  </method>
        	  
            <method event="onclick">
        		    canvas.legend.setVisible(true);
        		    this.setVisible(false);
        	  </method>
            	
        </button>


        <class name="line" extends="drawview">
        
        	<attribute name="yValue" value="0"/>
        	
        	<method event="onyValue">
        		  
        	</method>
        
        	<method name="init">
                    super.init();   
        	</method>
        
         	<method name="drawLine" args="colorI">	
              var startXonDisplay = (startX-minX)*xAxisLenght/xRange+xMarkerMargin+displayMargin;    		  
              var stopXonDisplay =   (stopX-minX)*xAxisLenght/xRange+xMarkerMargin+displayMargin;
        			var startYonDisplay = displayMargin + yAxisLenght-(startY * yAxisLenght)/(maxY-minY);
        		  var stopYonDisplay = displayMargin + yAxisLenght-(stopY * yAxisLenght)/(maxY-minY);
        		  this.moveTo(startXonDisplay,startYonDisplay);
        		  this.lineTo(stopXonDisplay,stopYonDisplay);
              this.strokeStyle = colorI;
              this.lineWidth = 2;
              this.stroke();
        	</method>
        
        </class>


      	<class name="legendItem" extends="drawview">
      		 
           <method name="init">
              	super.init();   
      		 </method>
      
      		 <method name="drawItem" args="lineName,color">
                this.moveTo(10,10);
      		      this.lineTo(20,10);
      			    this.strokeStyle = color;
      	        this.lineWidth = 4;
      	        this.stroke();
       	  	    var txt = new LzText(this,{x:50,text:lineName});
      		 </method>
      	</class>


</canvas>


		
		
		
		

	        
	        

		
		
