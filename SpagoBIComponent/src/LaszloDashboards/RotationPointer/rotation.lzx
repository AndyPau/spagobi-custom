<canvas debug="false" width="100%" height="100%"> 

  <dataset type="http" name="data" src=""/>   


  <script>
	var appHeight = typeof(global.paramHeight)!="undefined" ? parseInt(global.paramHeight) : 300;
	var appWidth = typeof(global.paramWidth)!="undefined" ? parseInt(global.paramWidth) : 300;		
    var dataurlParam = typeof(global.dataurl)!="undefined" ? global.dataurl : "http://localhost:8080/openlaszlo/OpenLaszloEngineDash"; 
	var xLabelAttributeName = typeof(global.xLabel)!="undefined" ? global.xLabel : "xLabel";	
	var valueAttributeName = typeof(global.VALUE)!="undefined" ? global.VALUE :  "value";
	var min = typeof(global.minValue)!="undefined" ? parseInt(global.minValue) : 100;	
    var low = typeof(global.lowValue)!="undefined" ? parseInt(global.lowValue) : 295;
    var high = typeof(global.highValue)!="undefined" ? parseInt(global.highValue) : 340;
    var max = typeof(global.maxValue)!="undefined" ? parseInt(global.maxValue) : 400;
	var arc1Color = typeof(global.colorArc1)!="undefined" ? global.colorArc1 : 0x9cff00;
	var arc2Color = typeof(global.colorArc2)!="undefined" ? global.colorArc2 : 0xfff999;
	var arc3Color = typeof(global.colorArc3)!="undefined" ? global.colorArc3 : 0xff5454;
	var refRate = typeof(global.refreshRate)!="undefined" ? parseInt(global.refreshRate) : 15000;
	var numDiv = typeof(global.numOfDivisions)!="undefined" ? global.numOfDivisions : 10;
	var appMargin = typeof(global.windowMargin)!="undefined" ? global.windowMargin : 10;
	var withMainDiv=typeof(global.showMainDiv)!="undefined" ? global.showMainDiv : true;
	var withSecDiv=typeof(global.showSecDiv)!="undefined" ? global.showSecDiv : true;	
	var withMainText=typeof(global.showMainText)!="undefined" ? global.showMainText : true;
	var withSecText=typeof(global.showSecText)!="undefined" ? global.showSecText : true; 

	
	<!--layout -->
	var fontSize1=1/15;
	var fontSize2=1/25;
	var textPositionRate1 = 8/10;
	var textPositionRate2 = 11/13; 
	var radialGradientRate=3/4;
	var rectangleHeightRate = 1/4;	
	var innerArcRate=3/4;
	var lineSize1Rate = 1/40;
	var lineSize2Rate = 1/80;
	var lineLenght1Rate = 1/10;
	var lineLenght2Rate = 1/11;
	var innerSphereRate = 1/14;
	var agoHeightRate = 1/30;
	var agoWidthRate = 3/4;
	var agoColor = 0xff0000;
	var arcInnerColor = 0xcccccc;
	var text1Color = 0x0000ff;	
	var text2Color = 0x0000ff;


	<!--Set dataset-->
	var dataset = canvas.datasets.data;
        dataset.setQueryType("POST");
        dataset.setSrc(dataurlParam); 
        var actualang = -1;  


	//var clickID = 0;

  </script>  

  <drawview name="display">

  	<method name="showDisplay" args="min,low,high,max">
		
	   	 <!-- this.setWidth(appWidth);
	  	 this.setHeight(appHeight); -->

	         var radiusByWidth = (appWidth-2*appMargin)/2;
	         var radiusByHeight = (appHeight-2*appMargin)/(1+rectangleHeightRate);
	
		 var radius = 0;
		 var centerX = 0;
		 var centerY = 0;

	     if (radiusByWidth &lt;  radiusByHeight) {
	  		radius = radiusByWidth;					     
	     } else {
			radius = radiusByHeight;			
 		}
<!-- ORIG 
		centerY = (appHeight-2*appMargin)-radius/4+appMargin;
		centerX = (appWidth-2*appMargin)/2+appMargin;
-->
		this.setWidth(appWidth);
		this.setHeight(appHeight-radius+(appMargin*2));
		
		centerY = appHeight-radius+appMargin;
		centerX = (appWidth-2*appMargin)/2+appMargin;
		
		this.rotDisplay.setX(centerX);
		this.rotDisplay.setY(centerY);
		this.rotDisplay.ago.setAgo(-radius*agoWidthRate,radius*agoHeightRate,agoColor);
		 
		var deltaDiv = (max-min)/numDiv;

		ang = 0;


		if (withMainDiv) {
			canvas.display.mainDiv.showDiv(centerX,centerY,radius,radius*lineLenght1Rate,lineSize1Rate*radius);
		}

		if (withSecDiv) {	
   			canvas.display.secondaryDiv.showDiv(centerX,centerY,radius,radius*lineLenght2Rate,lineSize2Rate*radius);
		}



		if (withMainText) {
	
			canvas.display.mainText.showText(centerX,centerY,radius*textPositionRate1,deltaDiv,fontSize1*radius);
		}

		if (withSecText) {
	
			canvas.display.secondaryText.showText(centerX,centerY,radius*textPositionRate2,deltaDiv,fontSize2*radius);
		}   
		
		
		var angLow = (low-min)*Math.PI/(max-min);
		var angHigh = (high-min)*Math.PI/(max-min);

		Debug.write(angLow*180/Math.PI);
		Debug.write(angHigh*180/Math.PI);

		this.setArc(centerX,centerY,radius,0,angLow,arc1Color);
		this.setArc(centerX,centerY,radius,angLow,angHigh,arc2Color);
		this.setArc(centerX,centerY,radius,angHigh,Math.PI,arc3Color);

		
		this.rotDisplay.sphere.setSphere(centerX,centerY,radius*innerSphereRate);

		//this.shadow.showShadow(centerX,centerY,radius);
		
       	</method>

	<method name="setArc" args="centerX,centerY,radius,angStart,angStop,color"> 
		var arcStartX = centerX-radius*Math.cos(angStart);
		var arcStartY = centerY-radius*Math.sin(angStart);

		<!-- ORIG angStart = (Math.PI-angStart)/Math.PI*180; 
		angStop = (Math.PI-angStop)/Math.PI*180; -->
		
		angStart = (Math.PI-angStart); 
		angStop = (Math.PI-angStop);

		var arcIntoX = centerX-radius*Math.cos((angStop-angStart));
		var arcIntoY = centerY-radius*Math.sin((angStop-angStart));

		this.moveTo(centerX,centerY);
		this.beginPath();
		this.lineTo(arcStartX,arcStartY);
		<!--  ORIG this.arc(arcStartX,arcStartY,radius,angStart,angStop,false); -->
		this.arc(centerX,centerY,radius,angStart,angStop,false);
		this.lineTo(centerX,centerY);
		this.closePath();

        this.fillStyle = color;
        this.globalAlpha = 0.5; 		
        this.fill();
           
          
        this.strokeStyle = 0xffff00;
        this.lineWidth = 5;
        this.stroke();
		   
		var g = this.createRadialGradient(centerX-radius*radialGradientRate,centerY-radius*radialGradientRate, .7, centerX+radius*radialGradientRate, centerX+radius*radialGradientRate, 0)
	        this.globalAlpha = 0; 
	        g.addColorStop(0, 0x000000);
	        this.globalAlpha = 0.7;
	        g.addColorStop(1, 0xffffff);
	        this.fillStyle = g;
	        this.fill();
            
	        this.strokeStyle = 0x000000;
	        this.lineWidth = 2;
	        this.stroke();
    	

	</method>

<!-- ***CANVAS.DISPLAY.SHADOW*********************************************************************
	<drawview name="shadow">	        
		<method name="showShadow" args="centerX,centerY,radius"> 

			this.beginPath();
			this.moveTo(centerX-radius,centerY);
			this.lineTo(centerX-radius,centerY+radius*rectangleHeightRate);
			this.lineTo(centerX+radius,centerY+radius*rectangleHeightRate);
			this.lineTo(centerX+radius,centerY);
			this.closePath();

			this.fillStyle = 0x000000;
		        this.globalAlpha = 1; 		
		        this.fill();
               
			var g = this.createRadialGradient(centerX-radius,centerY, .7, centerX+radius, centerY+radius*rectangleHeightRate, 0)
		        this.globalAlpha = 0; 
		        g.addColorStop(0, 0x000000);
		        this.globalAlpha = 1;
		        g.addColorStop(1, 0xffffff);
		        this.fillStyle = g;
		        this.fill();
			
        	        this.strokeStyle = 0xffffff;
		        this.lineWidth = 5;
		        this.stroke();
	
		        this.strokeStyle = 0xffffff;
		        this.lineWidth = 2;
		        this.stroke();
		</method>

		 <method event="onclick">
			this.setVisible(false);
		</method> 
	</drawview>	     -->   



<!-- ***CANVAS.DISPLAY.mainDiv*********************************************************************-->
	        

	<drawview name="mainDiv">	        

		<method name="showDiv" args="centerX,centerY,radius, length, size"> 

		   ang = 0;

	for (var i = 0; i &lt; numDiv+1; i++) {

			var startX = centerX-(radius-length)*Math.cos(ang);
			var startY = centerY-(radius-length)*Math.sin(ang);
			var stopX = centerX-radius*Math.cos(ang);
			var stopY = centerY-radius*Math.sin(ang);
			
			this.moveTo(startX,startY);
			this.lineTo(stopX,stopY);
			this.moveTo(startX,startY);
			
   		    	this.strokeStyle = 0x000000;
		        this.lineWidth = size;
			this.globalAlpha = 1; 
		        this.stroke();

	   	ang = ang+Math.PI/numDiv;

	}



	
		
		</method > 


	</drawview> <!-- **mainDiv*****************************************************************************-->

<!-- **mainText*****************************************************************************-->

	<drawview name="mainText">
				
		<method name="showText" args="centerX,centerY, text, deltaDiv, fontSize">

		   ang = 0;
		   label=min;

	for (var i = 0; i &lt; numDiv+1; i++) {

			var textX = centerX-text*Math.cos(ang);
			var textY = centerY-text*Math.sin(ang);

			var txt = new LzText(this);
			txt.setAttribute("fontsize",fontSize);
			txt.setColor(text2Color);
			txt.setAttribute("immediateparent",this);
			txt.setText(label);
			
			txt.setWidth(fontSize*3);
			txt.setHeight(fontSize*3);

			txt.setX(textX-fontSize);					
			txt.setY(textY-fontSize);

	   	ang = ang+Math.PI/numDiv;
		label=label+deltaDiv;
	}

		</method > 


	</drawview> <!-- **CANVAS.DISPLAY.mainText************************************************************-->

<!-- **CANVAS.DISPLAY.secondaryDiv******************************************************************-->

	<drawview name="secondaryDiv">

		<method name="showDiv" args="centerX,centerY,radius, length, size"> 

		   ang = Math.PI/numDiv/2;

	for (var i = 0; i &lt; numDiv; i++) {

			var startX = centerX-(radius-length)*Math.cos(ang);
			var startY = centerY-(radius-length)*Math.sin(ang);
			var stopX = centerX-radius*Math.cos(ang);
			var stopY = centerY-radius*Math.sin(ang);
			
			this.moveTo(startX,startY);
			this.lineTo(stopX,stopY);
			this.moveTo(startX,startY);
			
   		    	this.strokeStyle = 0x000000;
		        this.lineWidth = size;
			this.globalAlpha = 1; 
		        this.stroke();
		 
		ang = ang+Math.PI/numDiv;

	}
		
		</method > 
	

	</drawview> <!-- **CANVAS.DISPLAY.secondaryDiv************************************************************-->



<!-- **CANVAS.DISPLAY.secondaryText**************************************************************-->

	<drawview name="secondaryText">

		<method name="showText" args="centerX,centerY,text,deltaDiv,fontSize">

		   ang = Math.PI/numDiv/2;
		   label = min+deltaDiv/2;

	for (var i = 0; i &lt; numDiv; i++) {

			var textX = centerX-text*Math.cos(ang);
			var textY = centerY-text*Math.sin(ang);

			var txt = new LzText(this);
			txt.setAttribute("fontsize",fontSize);
			txt.setColor(text2Color);
			txt.setAttribute("immediateparent",this);
			txt.setText(label);
			
			txt.setWidth(fontSize*3);
			txt.setHeight(fontSize*3);

			txt.setX(textX-fontSize);					
			txt.setY(textY-fontSize);
	
		ang = ang+Math.PI/numDiv;
		label=label+deltaDiv;
	}			
		</method > 
	

	</drawview> <!-- **CANVAS.DISPLAY.secondaryText*********************************************************-->


<!-- **CANVAS.DISPLAY.rotDisplay******************************************************************************-->	


	<view name="rotDisplay" height="100">
    		
	      <animator name="rot" attribute="rotation" duration="3000" start="false" />
  	        
	      <method name="changeang" args="ang" >

                  this.rot.setTo(ang);
                  this.rot.doStart();  

              </method>

<!-- **CANVAS.DISPLAY.rotDisplay.AGO***********************************************************************-->	
		<drawview name="ago" >	
			<method name="setAgo" args="width,height,color"> 
				this.moveTo(0,0);
				this.beginPath();
				this.lineTo(0,height/4);
				this.lineTo(width,height/4);
				this.lineTo(width,-height/4);
				this.lineTo(0,-height/4);
				this.closePath();				


				this.fillStyle = 0x000000;
			        this.globalAlpha = 1; 		
			        this.fill();

				this.strokeStyle = color;
			        this.lineWidth = height/8;
			        this.stroke();
				
				
			</method>

		</drawview> <!-- **CANVAS.DISPLAY.rotDisplay.AGO*******************************************************-->

<!-- **CANVAS.DISPLAY.rotDisplay.SPHERE***********************************************************************-->

	<drawview name="sphere">	        
		<method name="setSphere" args="centerX,centerY,radius"> 
			

		   	this.setArc(0,0,radius,0,2*Math.PI,0xffffff);
		</method>

		<method name="setArc" args="centerX,centerY,radius,angStart,angStop,color"> 
			
			var arcStartX = centerX-radius*Math.cos(angStart);
			var arcStartY = centerY-radius*Math.sin(angStart);

			<!--  ORIG angStart = (Math.PI-angStart)/Math.PI*180; 
			angStop = (Math.PI-angStop)/Math.PI*180;
			 -->
			angStart =(Math.PI-angStart); 
			angStop = (Math.PI-angStop);

			var arcIntoX = centerX-radius*Math.cos((angStop-angStart));
			var arcIntoY = centerY-radius*Math.sin((angStop-angStart));

			<!-- ORIG this.moveTo(centerX,centerY);
			this.beginPath();
			this.lineTo(arcStartX,arcStartY);
			this.arc(arcStartX,arcStartY,radius,angStart,angStop,false);
			this.lineTo(centerX,centerY);
			this.closePath();  -->
			
			this.beginPath();
			this.arc(centerX,centerY,radius,angStart,angStop,false);
			this.lineTo(centerX,centerY);
			this.closePath();
	
	        this.fillStyle = color;
	        this.globalAlpha = 1; 		
	        this.fill();
	          <!--   
	        this.strokeStyle = 0x000000;
	        this.lineWidth = 5;
	        this.stroke();
				   
			var g = this.createRadialGradient(centerX-radius,centerY-radius, 0.5, centerX+radius, centerX+radius, 0)
        		this.globalAlpha = 0; 
        		g.addColorStop(0, 0x000000);
        		this.globalAlpha = 1;
        		g.addColorStop(1, 0xffffff);
        		this.fillStyle = g;
        		this.fill();
            -->
        		this.strokeStyle = 0x000000;
        		this.lineWidth = 2;
        		this.stroke();
   		
		</method>
	</drawview> <!--**CANVAS.DISPLAY.rotDisplay.SPHERE******************************************************-->

	</view> <!-- **CANVAS.DISPLAY.rotDisplay*************************************************************************-->
	


    <datapointer id="rotationresponse" xpath="data:/rows/row[0]">
      	<method event="ondata"> 
              var label = rotationresponse.getNodeAttribute(xLabelAttributeName);
              var rotation = rotationresponse.getNodeAttribute(valueAttributeName);
              if (rotation == undefined || rotation == "undefined")
              	rotation =  rotationresponse.getNodeAttribute(valueAttributeName.toUpperCase());
              	
              	
              rotation = rotation*180/(max-min);
              if(actualang==-1) {
                  actualang = rotation;
                  canvas.display.rotDisplay.changeang(rotation);
               } else {
                  canvas.display.rotDisplay.changeang(rotation);
               }
      	</method>
    </datapointer>

    <method name="timer">
         this.fadeDelegate = new LzDelegate( this, "refresh" );
   		 lz.Timer.addTimer( this.fadeDelegate, refRate ); 	
    </method>  
    
    <method name="refresh" >
       	dataset.doRequest();
      	canvas.display.timer(); 
    </method>


    <method name="start" event="oninit">
          canvas.display.showDisplay(min,low,high,max);
          dataset.doRequest();
          canvas.display.timer();
    </method>

    <!-- <method event="onclick">
	Debug.write("clickID"+clickID);
		<![CDATA[ 
	      switch(clickID ++){
	        case 0:
			Debug.write("clickID "+clickID);
			canvas.display.mainDiv.setVisible(false);
			canvas.display.secondaryDiv.setVisible(false);
			canvas.display.mainText.setVisible(false);
			canvas.display.secondaryText.setVisible(false);
		break;
	        case 2:
			canvas.display.mainDiv.setVisible(true);
	
		break;
	        case 3:
			canvas.display.secondaryDiv.setVisible(true);

		break;
	        case 4:
			canvas.display.mainText.setVisible(true);
		break;
	        case 5:
			canvas.display.secondaryText.setVisible(true);
		break;
	        case 6:
			canvas.display.mainDiv.setVisible(false);
			canvas.display.secondaryDiv.setVisible(false);
			canvas.display.mainText.setVisible(false);
			canvas.display.secondaryText.setVisible(false);
			clickID =1;
		}
	       ]]>
     </method> -->

     
 </drawview> <!-- **CANVAS.DISPLAY**************************************************************-->





</canvas>

