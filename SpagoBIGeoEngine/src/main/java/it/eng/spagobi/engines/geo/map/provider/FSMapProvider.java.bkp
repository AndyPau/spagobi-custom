/**
 *
 *	LICENSE: see COPYING file
 *
**/
package it.eng.spagobi.engines.geo.map.provider;

import it.eng.spago.base.SourceBean;
import it.eng.spago.error.EMFErrorSeverity;
import it.eng.spago.error.EMFUserError;
import it.eng.spago.tracing.TracerSingleton;
import it.eng.spagobi.engines.geo.Constants;
import it.eng.spagobi.engines.geo.configuration.MapConfiguration;
import it.eng.spagobi.engines.geo.configuration.MapProviderConfiguration;
import it.eng.spagobi.engines.geo.dataset.DataSet;
import it.eng.spagobi.engines.geo.map.utils.SVGMapLoader;

import java.io.File;
import java.io.FileNotFoundException;
import java.net.MalformedURLException;
import java.util.List;

import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamReader;

import org.w3c.dom.svg.SVGDocument;

/**
 * Defines methods to get an xml stream reader of the svg map.
 */
public class FSMapProvider extends AbstractMapProvider {

	/**
	 * Constructors
	 */
	public FSMapProvider() {
		 super();
	}
	
	public FSMapProvider(MapProviderConfiguration mapProviderConfiguration) {
		super(mapProviderConfiguration);
	}
	
	
	private String getMapUrl(String mapName) throws EMFUserError {
		String url = null;
		File map = new File(mapProviderConfiguration.getDirName() + "\\" + mapName + ".svg");
		try {
			url = map.toURI().toURL().toString();
		} catch (MalformedURLException e) {
			throw new EMFUserError(EMFErrorSeverity.ERROR, "error.mapfile.notfound");
		}
		return url;
	}
	
	
	/**
     * Gets the DOM of the svg map.
     * @param mapProviderConfiguration SourceBean object which contains the configuration for the 
     * map recovering
     */
	public SVGDocument getSVGMapDOMDocument(DataSet datamart) throws EMFUserError {
		SVGDocument svgDocument;
		String mapName; 
		String mapUrl = "?";		
		
		svgDocument = null;
		
			
		
		
		try {
			String targetFeatureName = datamart.getTargetFeatureName();
			
			mapName = mapProviderConfiguration.getMapName();
			if(mapName == null) {
				List maps = MapConfiguration.getMapCatalogueAccessUtils().getMapNamesByFeature(targetFeatureName);
				mapName = (String)maps.get(0);
			}
			
			
			mapUrl = getMapUrl(mapName);
			//File file = new File(mapUrl);
			svgDocument = SVGMapLoader.loadMapAsDocument(mapUrl);
		} catch (Exception e) {
			e.printStackTrace();
			throw new EMFUserError(EMFErrorSeverity.ERROR, "error.mapfile.notfound");
		}
		
		return svgDocument;
	}
	
	/**
     * Gets an xml stream reader of the svg map.
     * @param mapProviderConfiguration SourceBean object which contains the configuration for the 
     * map recovering
     */
	public XMLStreamReader getSVGMapStreamReader(SourceBean mapProviderConfiguration) throws EMFUserError {
		XMLStreamReader streamReader;
		String mapName; 
		String mapUrl;
		
		streamReader = null;
		
		mapName = (String)mapProviderConfiguration.getAttribute(Constants.MAP_NAME);		
		mapUrl = getMapUrl(mapName);
		
		try {
			streamReader = SVGMapLoader.getMapAsStream(mapUrl);
		} catch (FileNotFoundException e) {
			TracerSingleton.log(Constants.LOG_NAME, TracerSingleton.MAJOR, 
					            "DefaultMapProvider :: getSVGMapStreamReader : " +
					            "map file not found, path " + mapUrl);
			throw new EMFUserError(EMFErrorSeverity.ERROR, "error.mapfile.notfound");
		} catch (XMLStreamException e) {
			TracerSingleton.log(Constants.LOG_NAME, TracerSingleton.MAJOR, 
        			"DefaultMapProvider :: getSVGMapStreamReader : " +
        			"Cannot load the stream of the map file, path " + mapUrl);
			throw new EMFUserError(EMFErrorSeverity.ERROR, "error.mapfile.notloaded");
		}
		
		
		return streamReader;
	}

}