/* SpagoBI, the Open Source Business Intelligence suite

 * Copyright (C) 2012 Engineering Ingegneria Informatica S.p.A. - SpagoBI Competency Center
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0, without the "Incompatible With Secondary Licenses" notice. 
 * If a copy of the MPL was not distributed with this file, You can obtain one at http://mozilla.org/MPL/2.0/. */
package it.eng.spagobi.tools.importexport.transformers;

import it.eng.spagobi.commons.utilities.GeneralUtilities;
import it.eng.spagobi.tools.importexport.ITransformer;

import java.io.File;
import java.sql.Connection;
import java.sql.SQLException;
import java.sql.Statement;

import org.apache.log4j.Logger;

public class TransformerFrom2_6_0To2_7_0 implements ITransformer {

	static private Logger logger = Logger.getLogger(TransformerFrom2_6_0To2_7_0.class);

	public byte[] transform(byte[] content, String pathImpTmpFolder, String archiveName) {
		logger.debug("IN");
		try {
			TransformersUtilities.decompressArchive(pathImpTmpFolder, archiveName, content);
		} catch(Exception e) {
			logger.error("Error while unzipping 2.3.0 exported archive", e);	
		}
		archiveName = archiveName.substring(0, archiveName.lastIndexOf('.'));
		changeDatabase(pathImpTmpFolder, archiveName);
		// compress archive
		try {
			content = TransformersUtilities.createExportArchive(pathImpTmpFolder, archiveName);
		} catch (Exception e) {
			logger.error("Error while creating creating the export archive", e);	
		}
		// delete tmp dir content
		File tmpDir = new File(pathImpTmpFolder);
		GeneralUtilities.deleteContentDir(tmpDir);
		logger.debug("OUT");
		return content;
	}

	private void changeDatabase(String pathImpTmpFolder, String archiveName) {
		logger.debug("IN");
		Connection conn = null;
		try {
			conn = TransformersUtilities.getConnectionToDatabase(pathImpTmpFolder, archiveName);
			fixKpis(conn);
			fixUDPs(conn);
			fixAnalyticalDriversVisibility(conn);
			fixOUs(conn);
			conn.commit();
		} catch (Exception e) {
			logger.error("Error while changing database", e);	
		} finally {
			logger.debug("OUT");
			try {
				if (conn != null && !conn.isClosed()) {
					conn.close();
				}
			} catch (SQLException e) {
				logger.error("Error closing connection to export database", e);
			}
		}
	}

	/**
	 * Since SpagoBI 2.7, analytical drivers can be hidden.
	 * Since we used an already existing column (VIEW_FL) but its value was 0, now we set VIEW_FL = 1 to every analytical driver 
	 * to let it be visible.
	 * @param conn The connection
	 * @throws Exception
	 */
	private void fixAnalyticalDriversVisibility(Connection conn) throws Exception {
		logger.debug("IN");
		Statement stmt = conn.createStatement();
		String sql = "UPDATE SBI_OBJ_PAR SET VIEW_FL = 1;";
		stmt.executeUpdate(sql);
		logger.debug("OUT");
	}

	private void fixKpis(Connection conn) throws Exception {
		logger.debug("IN");

		Statement stmt = conn.createStatement();
		String sql =  "CREATE TABLE SBI_KPI_DOCUMENTS (" +
		" ID_KPI_DOC INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1) NOT NULL," +
		" BIOBJ_ID INTEGER NOT NULL," +
		" KPI_ID INTEGER NOT NULL)";
        stmt.executeUpdate(sql);
        
        sql=" INSERT INTO SBI_KPI_DOCUMENTS(KPI_ID,BIOBJ_ID)"+
		" SELECT k.KPI_ID, o.BIOBJ_ID"+
		" FROM SBI_KPI k,SBI_OBJECTS o WHERE"+
		" k.DOCUMENT_LABEL = o.LABEL"+
		" and k.DOCUMENT_LABEL IS NOT NULL";
        stmt.executeUpdate(sql);
		
		sql =  "ALTER TABLE SBI_KPI DROP COLUMN DOCUMENT_LABEL;";
		stmt.executeUpdate(sql);
		
		sql =  "ALTER TABLE SBI_KPI ADD COLUMN IS_ADDITIVE CHAR(1);";
		stmt.executeUpdate(sql);
		
		sql=" CREATE TABLE SBI_KPI_REL ("+
		" KPI_REL_ID INTEGER NOT NULL,"+
		" KPI_FATHER_ID INTEGER NOT NULL,"+
		" KPI_CHILD_ID INTEGER NOT NULL,"+
		" PARAMETER VARCHAR"+
		" );";
		stmt.executeUpdate(sql);

		logger.debug("OUT");
	}
	

	private void fixUDPs(Connection conn) throws Exception {
		logger.debug("IN");

		Statement stmt = conn.createStatement();
		String sql = "CREATE MEMORY TABLE SBI_UDP (" +
				" UDP_ID INTEGER," +
				" TYPE_ID INTEGER NOT NULL," +
				" FAMILY_ID INTEGER NOT NULL," +
				" LABEL VARCHAR NOT NULL," +
				" NAME VARCHAR NOT NULL," +
				" DESCRIPTION VARCHAR NULL," +
				" IS_MULTIVALUE BOOLEAN DEFAULT FALSE);";
        stmt.executeUpdate(sql);
		
		sql =  "CREATE MEMORY TABLE SBI_UDP_VALUE (" +
				" UDP_VALUE_ID INTEGER," +
				" UDP_ID INTEGER NOT NULL," +
				" VALUE VARCHAR NOT NULL," +
				" PROG INTEGER NULL," +
				" LABEL VARCHAR NOT NULL," +
				" NAME VARCHAR NULL," +
				" FAMILY VARCHAR NULL," +
				" BEGIN_TS TIMESTAMP NOT NULL," +
				" END_TS TIMESTAMP NULL," +
				" REFERENCE_ID INTEGER NULL);";
        stmt.executeUpdate(sql);

		logger.debug("OUT");
	}
	
	private void fixOUs(Connection conn) throws Exception {
		logger.debug("IN");

		Statement stmt = conn.createStatement();
		String sql = "CREATE MEMORY TABLE SBI_ORG_UNIT (" +
				" ID INTEGER NOT NULL," +
				" LABEL VARCHAR NOT NULL," +
				" NAME VARCHAR NOT NULL," +
				" DESCRIPTION VARCHAR);";
        stmt.executeUpdate(sql);
		
        sql = "CREATE MEMORY TABLE SBI_ORG_UNIT_HIERARCHIES (" +
        		" ID INTEGER NOT NULL," +
        		" LABEL VARCHAR NOT NULL," +
        		" NAME VARCHAR NOT NULL," +
        		" DESCRIPTION VARCHAR," +
        		" TARGET VARCHAR," +
        		" COMPANY VARCHAR);";
        stmt.executeUpdate(sql);
   
        sql = "CREATE MEMORY TABLE SBI_ORG_UNIT_NODES (" +
        		" NODE_ID INTEGER NOT NULL," +
        		" OU_ID INTEGER NOT NULL," +
        		" HIERARCHY_ID INTEGER NOT NULL," +
        		" PARENT_NODE_ID INTEGER NULL," +
        		" PATH VARCHAR NOT NULL);";
        stmt.executeUpdate(sql);
    
        sql = "CREATE MEMORY TABLE SBI_ORG_UNIT_GRANT (" +
        		" ID INTEGER NOT NULL," +
        		" HIERARCHY_ID INTEGER NOT NULL," +
        		" KPI_MODEL_INST_NODE_ID INTEGER NOT NULL," +
        		" START_DATE DATE," +
        		" END_DATE DATE," +
        		" LABEL VARCHAR NOT NULL," +
        		" NAME VARCHAR NOT NULL," +
        		" DESCRIPTION VARCHAR);";
        stmt.executeUpdate(sql);
    
        sql = "CREATE MEMORY TABLE SBI_ORG_UNIT_GRANT_NODES (" +
        		" NODE_ID INTEGER NOT NULL," +
        		" KPI_MODEL_INST_NODE_ID INTEGER NOT NULL," +
        		" GRANT_ID INTEGER NOT NULL);";
        stmt.executeUpdate(sql);
        
       logger.debug("OUT");
	}


	
	
	
	
	
	

	
}
