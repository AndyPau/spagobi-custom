/* Modifies to add Model Label */
ALTER TABLE SBI_KPI_MODEL ADD COLUMN KPI_MODEL_LBL VARCHAR(100) NOT NULL AFTER KPI_MODEL_DESC;
UPDATE SBI_KPI_MODEL SET KPI_MODEL_LBL = KPI_MODEL_CD;
ALTER TABLE SBI_KPI_MODEL DROP INDEX KPI_MODEL_CD;
ALTER TABLE SBI_KPI_MODEL ADD UNIQUE INDEX UNIQUE_LABEL(KPI_MODEL_LBL);
ALTER TABLE SBI_KPI_MODEL ADD UNIQUE INDEX UNIQUE_PAR_ID_CD(KPI_PARENT_MODEL_ID, KPI_MODEL_CD);

/* Modifies SBI_THRESHOLD_VALUE TABLE to add the selection to specify if the range is open or closed */
ALTER TABLE SBI_THRESHOLD_VALUE ADD COLUMN min_closed BOOLEAN ,
 ADD COLUMN max_closed BOOLEAN ,
 ADD COLUMN th_value DOUBLE ;

/* Modifies SBI_KPI_MODEL_INST to specify a KPI INSTANCE or a MODEL INSTANCE LABEL */
ALTER TABLE SBI_KPI_MODEL_INST ADD COLUMN modelUUID VARCHAR(400);

ALTER TABLE SBI_LOV MODIFY COLUMN LOV_PROVIDER TEXT DEFAULT NULL;

/**Internal profiling tables*/
CREATE TABLE SBI_USER (
	USER_ID CHAR(100) NOT NULL,
	PASSWORD VARCHAR(150),
	FULL_NAME VARCHAR(255),
	ID INT NOT NULL,
 PRIMARY KEY (ID))TYPE=INNODB;

CREATE TABLE SBI_ATTRIBUTE (
	ATTRIBUTE_NAME VARCHAR(255) NOT NULL,
	DESCRIPTION VARCHAR(500) NOT NULL,
	ATTRIBUTE_ID INT NOT NULL,
 PRIMARY KEY (ATTRIBUTE_ID))TYPE=INNODB;

CREATE TABLE SBI_USER_ATTRIBUTES (
	ID INT NOT NULL,
	ATTRIBUTE_ID INT NOT NULL,
	ATTRIBUTE_VALUE VARCHAR(500),
 PRIMARY KEY (ID,ATTRIBUTE_ID))TYPE=INNODB;


CREATE TABLE SBI_EXT_USER_ROLES (
	ID INT NOT NULL,
	EXT_ROLE_ID INT NOT NULL,
 PRIMARY KEY (ID,EXT_ROLE_ID))TYPE=INNODB;


ALTER TABLE SBI_USER_ATTRIBUTES ADD FOREIGN KEY (ID) REFERENCES SBI_USER (ID) ON DELETE CASCADE ON UPDATE  RESTRICT;
ALTER TABLE SBI_EXT_USER_ROLES ADD FOREIGN KEY (ID) REFERENCES SBI_USER (ID) ON DELETE CASCADE ON UPDATE  RESTRICT;
ALTER TABLE SBI_USER_ATTRIBUTES ADD FOREIGN KEY (ATTRIBUTE_ID) REFERENCES SBI_ATTRIBUTE (ATTRIBUTE_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;
ALTER TABLE SBI_EXT_USER_ROLES ADD FOREIGN KEY (EXT_ROLE_ID) REFERENCES SBI_EXT_ROLES (EXT_ROLE_ID) ON DELETE  RESTRICT ON UPDATE  RESTRICT;

ALTER TABLE SBI_USER ADD COLUMN DT_PWD_BEGIN DATETIME AFTER ID;
ALTER TABLE SBI_USER ADD COLUMN DT_PWD_END DATETIME AFTER DT_PWD_BEGIN;
ALTER TABLE SBI_USER ADD COLUMN FLG_PWD_BLOCKED BOOLEAN AFTER DT_PWD_END;
ALTER TABLE SBI_USER ADD COLUMN DT_LAST_ACCESS DATETIME AFTER FLG_PWD_BLOCKED;

/*adds new funcionality for internal profiling management*/
INSERT INTO SBI_USER_FUNC (NAME, DESCRIPTION) VALUES ('ProfileManagement', 'ProfileManagement');
INSERT INTO  SBI_ROLE_TYPE_USER_FUNC values((SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD = 'ROLE_TYPE' AND VALUE_CD = 'ADMIN'), (SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME='ProfileManagement'));
COMMIT;

/** configuration table*/
CREATE TABLE SBI_CONFIG (
	ID 				INTEGER  NOT NULL AUTO_INCREMENT,
	LABEL			VARCHAR(100) NOT NULL,
	NAME			VARCHAR(100) NULL,
	DESCRIPTION 	VARCHAR(500) NULL,
	IS_ACTIVE 		BOOLEAN DEFAULT TRUE,
	VALUE_CHECK 	VARCHAR(1000) NULL,
	VALUE_TYPE_ID 	INTEGER NULL,    
 PRIMARY KEY (ID))TYPE=INNODB;
 
 
CREATE UNIQUE INDEX XAK1SBI_CONFIG ON SBI_CONFIG
(
       LABEL                          ASC
);

CREATE INDEX XIF3SBI_CONFIG ON SBI_CONFIG
(
       VALUE_TYPE_ID                  ASC
);

ALTER TABLE SBI_CONFIG ADD CONSTRAINT FK_sbi_config_1 FOREIGN KEY FK_sbi_config_1 ( VALUE_TYPE_ID ) REFERENCES SBI_DOMAINS ( VALUE_ID ) ON DELETE RESTRICT;


/** change creation date datatype (date --> timestamp) */
ALTER TABLE SBI_VIEWPOINTS MODIFY COLUMN VP_CREATION_DATE TIMESTAMP NOT NULL;

/** new table for monitoring */
CREATE TABLE SBI_ACTIVITY_MONITORING (
  ID INTEGER UNSIGNED NOT NULL AUTO_INCREMENT,
  ACTION_TIME TIMESTAMP,
  USERNAME 	 	VARCHAR(40) NOT NULL,
  USERGROUP		VARCHAR(400),
  LOG_LEVEL 	VARCHAR(10) ,
  ACTION_CODE 	VARCHAR(45) NOT NULL,
  INFO 			VARCHAR(400),
  PRIMARY KEY (ID)
)TYPE=INNODB;

CREATE UNIQUE INDEX XAK1SBI_USER ON SBI_USER
(
       USER_ID                          ASC
);
ALTER TABLE SBI_ALARM MODIFY COLUMN ID_KPI_INSTANCE INTEGER,
 MODIFY COLUMN ID_THRESHOLD_VALUE INTEGER;