/* Modifies to add Model Label */
ALTER TABLE SBI_KPI_MODEL ADD KPI_MODEL_LBL VARCHAR2(100);
UPDATE SBI_KPI_MODEL SET KPI_MODEL_LBL = KPI_MODEL_CD;
ALTER TABLE SBI_KPI_MODEL MODIFY (KPI_MODEL_LBL NOT NULL);
DROP INDEX model_cd_unique;
CREATE UNIQUE INDEX UNIQUE_LABEL  ON SBI_KPI_MODEL(KPI_MODEL_LBL);
CREATE UNIQUE INDEX UNIQUE_PAR_ID_CD  ON SBI_KPI_MODEL(KPI_PARENT_MODEL_ID, KPI_MODEL_CD);

/* Modifies SBI_THRESHOLD_VALUE TABLE to add the selection to specify if the range is open or closed */
ALTER TABLE SBI_THRESHOLD_VALUE ADD min_closed SMALLINT;
ALTER TABLE SBI_THRESHOLD_VALUE ADD max_closed SMALLINT;
ALTER TABLE SBI_THRESHOLD_VALUE ADD th_value NUMBER(38,0);

/* Modifies SBI_KPI_MODEL_INST to specify a KPI INSTANCE or a MODEL INSTANCE LABEL */
ALTER TABLE SBI_KPI_MODEL_INST ADD modelUUID VARCHAR2(255);


ALTER TABLE SBI_LOV ADD TMP_CLMN VARCHAR2(4000);
UPDATE SBI_LOV SET TMP_CLMN = LOV_PROVIDER;
UPDATE SBI_LOV SET LOV_PROVIDER = NULL;
ALTER TABLE SBI_LOV DROP COLUMN LOV_PROVIDER;
ALTER TABLE SBI_LOV ADD LOV_PROVIDER CLOB;
UPDATE SBI_LOV SET LOV_PROVIDER = TO_CLOB(TMP_CLMN);
ALTER TABLE SBI_LOV DROP COLUMN TMP_CLMN;

/**Internal profiling tables*/
CREATE TABLE SBI_USER (
	USER_ID VARCHAR2(100) NOT NULL,
	PASSWORD VARCHAR2(150),
	FULL_NAME VARCHAR2(255),
	ID INTEGER NOT NULL,
 PRIMARY KEY (ID));

CREATE TABLE SBI_ATTRIBUTE (
	ATTRIBUTE_NAME VARCHAR2(255) NOT NULL,
	DESCRIPTION VARCHAR2(500) NOT NULL,
	ATTRIBUTE_ID INTEGER NOT NULL,
 PRIMARY KEY (ATTRIBUTE_ID));

CREATE TABLE SBI_USER_ATTRIBUTES (
	ID INTEGER NOT NULL,
	ATTRIBUTE_ID INTEGER NOT NULL,
	ATTRIBUTE_VALUE VARCHAR2(500),
 PRIMARY KEY (ID,ATTRIBUTE_ID));


CREATE TABLE SBI_EXT_USER_ROLES (
	ID INTEGER NOT NULL,
	EXT_ROLE_ID INTEGER NOT NULL,
 PRIMARY KEY (ID,EXT_ROLE_ID));


ALTER TABLE SBI_USER_ATTRIBUTES ADD FOREIGN KEY (ID) REFERENCES SBI_USER (ID) ;
ALTER TABLE SBI_EXT_USER_ROLES ADD FOREIGN KEY (ID) REFERENCES SBI_USER (ID);
ALTER TABLE SBI_USER_ATTRIBUTES ADD FOREIGN KEY (ATTRIBUTE_ID) REFERENCES SBI_ATTRIBUTE (ATTRIBUTE_ID) ;
ALTER TABLE SBI_EXT_USER_ROLES ADD FOREIGN KEY (EXT_ROLE_ID) REFERENCES SBI_EXT_ROLES (EXT_ROLE_ID) ;

ALTER TABLE SBI_USER ADD DT_PWD_BEGIN TIMESTAMP(6);
ALTER TABLE SBI_USER ADD DT_PWD_END TIMESTAMP(6);
ALTER TABLE SBI_USER ADD FLG_PWD_BLOCKED SMALLINT;
ALTER TABLE SBI_USER ADD DT_LAST_ACCESS TIMESTAMP(6);

--adds new funcionality for internal profiling management
INSERT INTO SBI_USER_FUNC (NAME, DESCRIPTION) VALUES ('ProfileManagement', 'ProfileManagement');
INSERT INTO SBI_ROLE_TYPE_USER_FUNC VALUES((SELECT VALUE_ID FROM SBI_DOMAINS WHERE DOMAIN_CD='ROLE_TYPE' AND VALUE_CD='ADMIN'),(SELECT USER_FUNCT_ID FROM SBI_USER_FUNC WHERE NAME='ProfileManagement' ));
COMMIT;

/** configuration table*/
CREATE SEQUENCE SBI_CONFIG_SEQ INCREMENT BY 1 START WITH 1 MAXVALUE 999999999999999 MINVALUE 1 NOCYCLE CACHE 20 NOORDER;
CREATE TABLE SBI_CONFIG (
	ID 				INTEGER NOT NULL,
	LABEL			VARCHAR2(100) NOT NULL,
	NAME			VARCHAR2(100) NULL,
	DESCRIPTION 	VARCHAR2(500) NULL,
	IS_ACTIVE 		SMALLINT Default 1,
	VALUE_CHECK 	VARCHAR2(1000) NULL,
	VALUE_TYPE_ID 	INTEGER NULL,    
 PRIMARY KEY (ID));
 
 
CREATE UNIQUE INDEX XAK1SBI_CONFIG ON SBI_CONFIG
(
       LABEL                          ASC
);

CREATE INDEX XIF3SBI_CONFIG ON SBI_CONFIG
(
       VALUE_TYPE_ID                  ASC
);

ALTER TABLE SBI_CONFIG ADD CONSTRAINT FK_sbi_config_1 FOREIGN KEY ( VALUE_TYPE_ID ) REFERENCES SBI_DOMAINS ( VALUE_ID );

CREATE TRIGGER TRG_SBI_CONFIG
  BEFORE INSERT
  ON SBI_CONFIG
  REFERENCING OLD AS OLD NEW AS NEW
  FOR EACH ROW
  DECLARE NUOVO_ID NUMBER;
BEGIN
IF :NEW.ID IS NULL THEN
     SELECT SBI_CONFIG_SEQ.NEXTVAL INTO NUOVO_ID FROM DUAL;
     :NEW.ID:=NUOVO_ID;
END IF;
END;
/

/** change creation date datatype (date --> timestamp) */
ALTER TABLE SBI_VIEWPOINTS MODIFY VP_CREATION_DATE TIMESTAMP;

CREATE TABLE SBI_ACTIVITY_MONITORING (
  ID INTEGER NOT NULL,
  ACTION_TIME TIMESTAMP,
  USERNAME 	 	VARCHAR2(40) NOT NULL,
  USERGROUP		VARCHAR2(400),
  LOG_LEVEL 	VARCHAR2(10) ,
  ACTION_CODE 	VARCHAR2(45) NOT NULL,
  INFO 			VARCHAR2(400),
  PRIMARY KEY (ID)
)
/

CREATE SEQUENCE SBI_ACTIVITY_SEQ 
INCREMENT BY 1 
START WITH 1 
NOMAXVALUE 
NOMINVALUE 
NOCACHE  
NOCYCLE
NOORDER
;

create trigger TRG_SBI_ACTIVITY_MONITORING
  BEFORE INSERT
  on SBI_ACTIVITY_MONITORING
  REFERENCING OLD AS old NEW AS new
  for each row
  declare nuovo_id number;
begin
IF :new.ID IS NULL THEN
     select SBI_ACTIVITY_SEQ.nextval into nuovo_id from dual;
     :new.ID:=nuovo_id;
END IF;
end;
/

CREATE UNIQUE INDEX XAK1SBI_USER ON SBI_USER
(
       USER_ID                          ASC
);
ALTER TABLE SBI_ALARM MODIFY (ID_KPI_INSTANCE INTEGER);
ALTER TABLE SBI_ALARM MODIFY (ID_THRESHOLD_VALUE INTEGER);